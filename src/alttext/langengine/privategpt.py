import requests

from .langengine import LangEngine

class PrivateGPT(LangEngine):
    def __init__(self, host) -> None:
        self.host = host

    def __setHost(self, host) -> bool:
        self.host = host
        return True

    def _completion(self, prompt: str) -> str:
        body = {
            "include_sources": False,
            "prompt": prompt,
            "stream": False,
            "use_context": False,
        }
        r = requests.post(f"{self.host}/v1/completions", json=body)
        r = r.json()
        return r["choices"][0]["message"]["content"].strip()

    def refineDesc(self, description: str) -> str:
        prompt = f"""The following string surrounded with '///' was generated by an Image Captioning AI when ran on some arbitrary image.
///{description}///

Your goal is to refine the string to be inserted as alt-text for an image in an Ebook.

Here are guidelines to follow...
1. Prioritize information in text alternative:
Aim to put the most important information at the beginning.
2. Length of the text alternative:
The alt text should be the most concise description possible of the image's purpose. If anything more than a short phrase or sentence is needed, it would be better to use one of the long description methods discussed in complex images.
3. Superfluous information in the text alternative:
Usually, there's no need to include words like “image”, “icon”, or “picture” in the alt text. People who can see will know this already, and screen readers announce the presence of an image. In some situations, it may be important to distinguish between paintings, photographs, or illustrations, etc., but it's best to avoid the more generic use of the terms.

Format your response as...
The refined string is: <refined_string>

If the string is empty, simply respond with...
The refined string is: N/A"""
        return self._completion(prompt)

    def refineOCR(self, chars: str) -> str:
        prompt = f"""The following string surrounded with '///' was generated by an Optical Character Recognition software when ran on some arbitrary image.
///
{chars}
///

Your goal is to refine the string.
There may be random/excess spaces or other characters in the string, please remove them.
Do not surround the refined string in quotation marks.

Format your response as...
The refined string is: <refined_string>

If the string is empty, simply respond with...
The refined string is: N/A"""
        return self._completion(prompt)

    def genPrompt(self, desc: str, chars: str, context: list[str], caption: str) -> str:
        ocr = ""
        if chars != None and chars != "":
            ocr = f"\nThe following string surrounded with '///' was generated by an Optical Character Recognition software when ran on the image.\n///{chars}///"
        before = ""
        if context[0] != None and context[0] != "":
            before = f"\nThe following string surrounded with '///' is the nearest text found before the image.\n///{context[0]}///"
        after = ""
        if context[1] != None and context[1] != "":
            after = f"\nThe following string surrounded with '///' is the nearest text found after the image.\n///{context[1]}///"
        cap = ""
        if caption != None and caption != "":
            cap = f"\nThe following string surrounded with '///' is a caption in the Ebook for the image.\n///{caption}///"

        prompt = f"""There following information is regarding an image found in an Ebook with no alternative-text.
The following string surrounded with '///' was generated by an Image Captioning AI when ran on the image.
///{desc}///{ocr}{cap}{before}{after}

Your goal is to create alternative-text for the image given the prior information.

Here are guidelines to follow to create quality alt-text...
1. Prioritize information in text alternative:
Aim to put the most important information at the beginning.
2. Length of the text alternative:
The alt text should be the most concise description possible of the image's purpose. If anything more than a short phrase or sentence is needed, it would be better to use one of the long description methods discussed in complex images.
3. Superfluous information in the text alternative:
Usually, there's no need to include words like “image”, “icon”, or “picture” in the alt text. People who can see will know this already, and screen readers announce the presence of an image. In some situations, it may be important to distinguish between paintings, photographs, or illustrations, etc., but it's best to avoid the more generic use of the terms.

Using all of the information stated, please generate alt-text for the image.
In your response, please only give the alt-text."""
        return prompt

    def refineAlt(
        self,
        desc: str,
        chars: str = None,
        context: list[str] = None,
        caption: str = None,
    ) -> str:
        prompt = self.genPrompt(
            desc,
            chars,
            context,
            caption,
        )
        return self._completion(prompt)

    def ingest(self, filename: str, binary) -> bool:
        ext = filename.split(".")[1]
        files = {"file": (filename, binary, f"application/{ext}")}
        headers = {"accept": "application/json"}
        r = requests.post(f"{self.host}/v1/ingest", files=files, headers=headers)
        return True

    def degest(self, filename: str) -> bool:
        headers = {"accept": "application/json"}
        r = requests.delete(f"{self.host}/v1/ingest/{filename}", headers=headers)
        return True
